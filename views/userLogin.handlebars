{{!--

-If the user is not authenticaed and hits the endpoint 'GET /', you will render this view with a login form.
-The form will contain two inputs, one for username and one for password.
-The form will be used to submit a POST request to the '/login' route on the server and must have an 'id' of 'login-form'.
-The input for the username must have a 'name' and 'id' of 'usernameInput'.
-The input for the password must have 'name' and 'id' of 'passwordInput' and should be an input 'type' of 'password'.
-You will also have a link on this page that links to '/register' and has the text "Click here to register!"

Do not forget to use labels for your inputs! For the labels, you will use the method of using the 'for' attribute.
You should have a label for both the username and password inputs referencing their id's in the for attribute of the label.

--}}

    <h1>Login</h1>
    {{#if error}}
        <p>{{error_message}}</p>
    {{/if}}
    <br/>
    <div>
        <form action="/user/login" method="POST" id="login-form">
                <label for="usernameInput">Username:</label>
                <input type="text" name="usernameInput" id="usernameInput">
                <label for="passwordInput">Password:</label>
                <input type="password" name="passwordInput" id="passwordInput">
                <input type="submit" value="login" id="login">
        </form>
    <a href="/user/register">Click here to register!</a>    
    </div>
        <style>
  form {
    width: 400px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  label {
    display: block;
    margin-bottom: 10px;
  }

  input[type="text"],
  input[type="password"] {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
  }

  input[type="submit"] {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    margin-top: 10px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
  }

  select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 3px;
  }

  a {
    display: inline-block;
    margin-top: 10px;
  }
</style>

<script>
  // Get references to the form and input fields
  const loginForm = document.querySelector('#login-form');
  const usernameInput = document.querySelector('#usernameInput');
  const passwordInput = document.querySelector('#passwordInput');
  


  function validatePassword(password) {
  // Check if the password is empty or contains only whitespace
  if (!password || password.trim().length === 0) {
    return("Password cannot be empty or contain only whitespace");
  }

  // Check if the password is at least 6 characters long
  if (password.length < 6) {
    return("Password must be at least 6 characters long");
  }

  // Check if the password contains at least one uppercase character
  if (!/[A-Z]/.test(password)) {
    return("Password must contain at least one uppercase character");
  }

  // Check if the password contains at least one number
  if (!/[0-9]/.test(password)) {
    return("Password must contain at least one number");
  }

  // Check if the password contains at least one special character
  if (!/[^a-zA-Z0-9]/.test(password)) {
    return("Password must contain at least one special character");
  }

  // If all checks pass, the password is valid
  return false;
}

function validateUserName(str) {
  // Check if the string is empty or contains only whitespace
  if (!str || str.trim().length === 0) {
    return("String cannot be empty or contain only whitespace");
  }

  // Check if the string is at least 4 characters long
  if (str.length < 4) {
    return("String must be at least 4 characters long");
  }

  // Check if the string contains only alphanumeric characters
  if (!/^[a-zA-Z0-9]+$/.test(str)) {
    return("String can only contain alphanumeric characters");
  }

  // If all checks pass, the string is valid
  return false;
}



  // Function to validate the form input
  function validateForm() {
    // check if the username is empty

    let e = validateUserName(usernameInput.value);
    if (e) {
      alert(`Either the username or password is invalid`);
      return false;
    }

    // check if the password is empty
    e = validatePassword(passwordInput.value);
    if (e) {
      alert(`Either the username or password is invalid`);
      return false;
    }
    // If all the checks pass, allow the form to be submitted
    return true;
  }

  // Add an event listener to the form to validate the input when the form is submitted
  loginForm.addEventListener('submit', (event) => {
    // prevent the form from being submitted if the input is invalid
    if (!validateForm()) {
      event.preventDefault();
    }
  });
</script>